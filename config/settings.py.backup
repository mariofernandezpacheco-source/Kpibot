# settings.py - Configuracion unificada para PhiBot
"""
Sistema de configuracion modernizado que usa YAML centralizado.
Este archivo mantiene compatibilidad con el codigo existente.
"""

from config.config_manager import S, get_config, get_config_manager

# Mantiene compatibilidad total con c√≥digo existente
# Ejemplo de uso:
# from settings import S
# print(S.tp_multiplier)  # Funciona igual que antes

# Funciones adicionales para acceso avanzado
def reload_config():
    """Recarga configuraci√≥n desde archivo YAML"""
    return get_config_manager().load_config(force_reload=True)

def get_current_config():
    """Obtiene configuraci√≥n actual completa"""
    return get_config()

def validate_current_config():
    """Valida configuraci√≥n actual"""
    config_mgr = get_config_manager()
    config = config_mgr.get_config()
    errors = config_mgr.validate_config(config)

    if errors:
        print("‚ö†Ô∏è Errores de validaci√≥n encontrados:")
        for error in errors:
            print(f"  - {error}")
        return False
    else:
        print("‚úÖ Configuraci√≥n v√°lida")
        return True

if __name__ == "__main__":
    print("üß™ Test de configuraci√≥n:")
    print(f"Data path: {S.data_path}")
    print(f"TP multiplier: {S.tp_multiplier}")
    print(f"Capital per trade: {S.capital_per_trade}")
    print(f"MLflow experiment: {S.mlflow_experiment}")

    validate_current_config()
